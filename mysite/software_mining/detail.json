{
  "project_name": "apache_storm",
  "build_id": "113300627",
  "commits": [
    {
      "sha": "4e0ff2f6e238a59c13d9af6dc3db84ae5817365f",
      "commit": {
        "author": {
          "name": "\u536b\u4e50",
          "email": "weiyue.wy@taobao.com",
          "date": "2016-03-03T02:21:55Z"
        },
        "committer": {
          "name": "\u536b\u4e50",
          "email": "weiyue.wy@taobao.com",
          "date": "2016-03-03T02:21:55Z"
        },
        "message": "revert unrelated changes to supervisor.clj",
        "tree": {
          "sha": "abd419e8c09e46a1f63bd42bbcee5e0a2f8123cb",
          "url": "https://api.github.com/repos/apache/storm/git/trees/abd419e8c09e46a1f63bd42bbcee5e0a2f8123cb"
        },
        "url": "https://api.github.com/repos/apache/storm/git/commits/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/apache/storm/commits/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f",
      "html_url": "https://github.com/apache/storm/commit/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f",
      "comments_url": "https://api.github.com/repos/apache/storm/commits/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "url": "https://api.github.com/repos/apache/storm/commits/b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "html_url": "https://github.com/apache/storm/commit/b1c8188d8252ef613c04aeae9e9560a800f9ead3"
        }
      ],
      "stats": {
        "total": 2,
        "additions": 2,
        "deletions": 0
      },
      "files": [
        {
          "sha": "72956790f362f54791fa9c91ca127ec57d2e96c9",
          "filename": "storm-core/src/clj/org/apache/storm/daemon/supervisor.clj",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "changes": 2,
          "blob_url": "https://github.com/apache/storm/blob/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f/storm-core/src/clj/org/apache/storm/daemon/supervisor.clj",
          "raw_url": "https://github.com/apache/storm/raw/4e0ff2f6e238a59c13d9af6dc3db84ae5817365f/storm-core/src/clj/org/apache/storm/daemon/supervisor.clj",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/clj/org/apache/storm/daemon/supervisor.clj?ref=4e0ff2f6e238a59c13d9af6dc3db84ae5817365f",
          "patch": "@@ -35,6 +35,7 @@\n   (:use [org.apache.storm.daemon common])\n   (:import [org.apache.storm.command HealthCheck])\n   (:require [org.apache.storm.daemon [worker :as worker]]\n+\n             [clojure.set :as set])\n   (:import [org.apache.thrift.transport TTransportException])\n   (:import [org.apache.zookeeper data.ACL ZooDefs$Ids ZooDefs$Perms])\n@@ -79,6 +80,7 @@\n           new-profiler-actions\n           (->>\n             (dofor [sid (distinct storm-ids)]\n+\n                    (if-let [topo-profile-actions (into [] (for [request (.getTopologyProfileRequests storm-cluster-state sid)] (clojurify-profile-request request)))]\n                       {sid topo-profile-actions}))\n            (apply merge))]"
        }
      ]
    },
    {
      "sha": "b1c8188d8252ef613c04aeae9e9560a800f9ead3",
      "commit": {
        "author": {
          "name": "\u536b\u4e50",
          "email": "weiyue.wy@taobao.com",
          "date": "2016-03-03T02:17:26Z"
        },
        "committer": {
          "name": "\u536b\u4e50",
          "email": "weiyue.wy@taobao.com",
          "date": "2016-03-03T02:17:26Z"
        },
        "message": "upmerge from master",
        "tree": {
          "sha": "e904d655e87270e509cc909ce38e40544120ccc5",
          "url": "https://api.github.com/repos/apache/storm/git/trees/e904d655e87270e509cc909ce38e40544120ccc5"
        },
        "url": "https://api.github.com/repos/apache/storm/git/commits/b1c8188d8252ef613c04aeae9e9560a800f9ead3",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/apache/storm/commits/b1c8188d8252ef613c04aeae9e9560a800f9ead3",
      "html_url": "https://github.com/apache/storm/commit/b1c8188d8252ef613c04aeae9e9560a800f9ead3",
      "comments_url": "https://api.github.com/repos/apache/storm/commits/b1c8188d8252ef613c04aeae9e9560a800f9ead3/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "69f2906c0748826101511b1dd6005f910ebfd5fc",
          "url": "https://api.github.com/repos/apache/storm/commits/69f2906c0748826101511b1dd6005f910ebfd5fc",
          "html_url": "https://github.com/apache/storm/commit/69f2906c0748826101511b1dd6005f910ebfd5fc"
        },
        {
          "sha": "df54280e333e5bf29cc4bbab7a29d9f3b245f4fd",
          "url": "https://api.github.com/repos/apache/storm/commits/df54280e333e5bf29cc4bbab7a29d9f3b245f4fd",
          "html_url": "https://github.com/apache/storm/commit/df54280e333e5bf29cc4bbab7a29d9f3b245f4fd"
        }
      ],
      "stats": {
        "total": 409,
        "additions": 328,
        "deletions": 81
      },
      "files": [
        {
          "sha": "13427bffbcacc1af4aa9aef533352c6862d755c8",
          "filename": ".gitignore",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/.gitignore",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/.gitignore",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/.gitignore?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -38,3 +38,4 @@ metastore_db\n .settings/\n .project\n .classpath\n+logs"
        },
        {
          "sha": "b666beb5ac4279200b0b547e25d2290bfc5e4dd7",
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "changes": 6,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/CHANGELOG.md",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/CHANGELOG.md",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/CHANGELOG.md?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -1,4 +1,7 @@\n ## 2.0.0\n+ * STORM-1592: clojure code calling into Utils.exitProcess throws ClassCastException\n+ * STORM-1579: Fix NoSuchFileException when running tests in storm-core\n+ * STORM-1244: port backtype.storm.command.upload-credentials to java\n  * STORM-1245: port backtype.storm.daemon.acker to java\n  * STORM-1545: Topology Debug Event Log in Wrong Location\n  * STORM-1254: port ui.helper to java\n@@ -40,6 +43,9 @@\n  * STORM-1521: When using Kerberos login from keytab with multiple bolts/executors ticket is not renewed in hbase bolt.\n \n ## 1.0.0\n+ * STORM-1574: Better handle backpressure exception etc.\n+ * STORM-1587: Avoid NPE while prining Metrics\n+ * STORM-1570: Storm SQL support for nested fields and array\n  * STORM-1576: fix ConcurrentModificationException in addCheckpointInputs\n  * STORM-1488: UI Topology Page component last error timestamp is from 1970\n  * STORM-1552: Fix topology event sampling log dir"
        },
        {
          "sha": "bfbd547e554ee1e946a1ad14a1ccb0543eb21370",
          "filename": "bin/storm.cmd",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/bin/storm.cmd",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/bin/storm.cmd",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/bin/storm.cmd?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -165,7 +165,7 @@\n   goto :eof\n \n :list\n-  set CLASS=org.apache.storm.command.List\n+  set CLASS=org.apache.storm.command.ListTopologies\n   set STORM_OPTS=%STORM_CLIENT_OPTS% %STORM_OPTS%\n   goto :eof\n "
        },
        {
          "sha": "997989abb8f18db03398a154cc786178529ac602",
          "filename": "bin/storm.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/bin/storm.py",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/bin/storm.py",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/bin/storm.py?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -293,7 +293,7 @@ def upload_credentials(*args):\n         print_usage(command=\"upload_credentials\")\n         sys.exit(2)\n     exec_storm_class(\n-        \"org.apache.storm.command.upload_credentials\",\n+        \"org.apache.storm.command.UploadCredentials\",\n         args=args,\n         jvmtype=\"-client\",\n         extrajars=[USER_CONF_DIR, STORM_BIN_DIR])\n@@ -389,7 +389,7 @@ def listtopos(*args):\n     List the running topologies and their statuses.\n     \"\"\"\n     exec_storm_class(\n-        \"org.apache.storm.command.List\",\n+        \"org.apache.storm.command.ListTopologies\",\n         args=args,\n         jvmtype=\"-client\",\n         extrajars=[USER_CONF_DIR, STORM_BIN_DIR])"
        },
        {
          "sha": "8ecfb3a1b032d5569f927895cad97971654ae450",
          "filename": "examples/storm-starter/src/jvm/org/apache/storm/starter/ThroughputVsLatency.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/examples/storm-starter/src/jvm/org/apache/storm/starter/ThroughputVsLatency.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/examples/storm-starter/src/jvm/org/apache/storm/starter/ThroughputVsLatency.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/examples/storm-starter/src/jvm/org/apache/storm/starter/ThroughputVsLatency.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -273,7 +273,7 @@ public static void printMetrics(C client, String name) throws Exception {\n     long acked = 0;\n     long failed = 0;\n     for (ExecutorSummary exec: info.get_executors()) {\n-      if (\"spout\".equals(exec.get_component_id())) {\n+      if (\"spout\".equals(exec.get_component_id()) && exec.get_stats() != null && exec.get_stats().get_specific() != null) {\n         SpoutStats stats = exec.get_stats().get_specific().get_spout();\n         Map<String, Long> failedMap = stats.get_failed().get(\":all-time\");\n         Map<String, Long> ackedMap = stats.get_acked().get(\":all-time\");"
        },
        {
          "sha": "7f9258c74e9a60f303f26a77e84415545261c681",
          "filename": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/CompilerUtil.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "changes": 7,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/CompilerUtil.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/CompilerUtil.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/CompilerUtil.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -79,8 +79,11 @@ private FieldType(String name, RelDataType relDataType) {\n     private Statistic stats;\n \n     public TableBuilderInfo field(String name, SqlTypeName type) {\n-      RelDataType dataType = typeFactory.createSqlType(type);\n-      fields.add(new FieldType(name, dataType));\n+      return field(name, typeFactory.createSqlType(type));\n+    }\n+\n+    public TableBuilderInfo field(String name, RelDataType type) {\n+      fields.add(new FieldType(name, type));\n       return this;\n     }\n "
        },
        {
          "sha": "c43c32fa58f542189f563363d764b493bd5c01dc",
          "filename": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/ExprCompiler.java",
          "status": "modified",
          "additions": 27,
          "deletions": 5,
          "changes": 32,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/ExprCompiler.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/ExprCompiler.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/ExprCompiler.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -26,8 +26,12 @@\n import org.apache.calcite.rel.type.RelDataType;\n import org.apache.calcite.rex.*;\n import org.apache.calcite.runtime.SqlFunctions;\n+import org.apache.calcite.schema.Function;\n+import org.apache.calcite.schema.impl.ReflectiveFunctionBase;\n+import org.apache.calcite.schema.impl.ScalarFunctionImpl;\n import org.apache.calcite.sql.SqlOperator;\n import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.calcite.sql.validate.SqlUserDefinedFunction;\n import org.apache.calcite.util.BuiltInMethod;\n import org.apache.calcite.util.NlsString;\n import org.apache.calcite.util.Util;\n@@ -179,6 +183,7 @@ private ImpTable() {\n           .put(builtInMethod(CHARACTER_LENGTH, BuiltInMethod.CHAR_LENGTH, NullPolicy.STRICT))\n           .put(builtInMethod(CHAR_LENGTH, BuiltInMethod.CHAR_LENGTH, NullPolicy.STRICT))\n           .put(builtInMethod(CONCAT, BuiltInMethod.STRING_CONCAT, NullPolicy.STRICT))\n+          .put(builtInMethod(ITEM, BuiltInMethod.ANY_ITEM, NullPolicy.STRICT))\n           .put(infixBinary(LESS_THAN, \"<\", \"lt\"))\n           .put(infixBinary(LESS_THAN_OR_EQUAL, \"<=\", \"le\"))\n           .put(infixBinary(GREATER_THAN, \">\", \"gt\"))\n@@ -198,7 +203,8 @@ private ImpTable() {\n           .put(expectNot(IS_NOT_FALSE, false))\n           .put(AND, AND_EXPR)\n           .put(OR, OR_EXPR)\n-          .put(NOT, NOT_EXPR);\n+          .put(NOT, NOT_EXPR)\n+          .put(CAST, CAST_EXPR);\n       this.translators = builder.build();\n     }\n \n@@ -213,7 +219,7 @@ private String compile(ExprCompiler compiler, RexCall call) {\n     }\n \n     private Map.Entry<SqlOperator, CallExprPrinter> builtInMethod(\n-        final SqlOperator op, final BuiltInMethod method, NullPolicy nullPolicy) {\n+            final SqlOperator op, final BuiltInMethod method, NullPolicy nullPolicy) {\n       if (nullPolicy != NullPolicy.STRICT) {\n         throw new UnsupportedOperationException();\n       }\n@@ -369,8 +375,8 @@ public String translate(\n           String s;\n           if (rhsNullable) {\n             s = foldNullExpr(\n-                String.format(\"(%2$s != null && !(%2$s)) ? false : %1$s\", lhs,\n-                    rhs), \"null\", op1);\n+                String.format(\"(%2$s != null && !(%2$s)) ? Boolean.FALSE : ((%1$s == null || %2$s == null) ? null : Boolean.TRUE)\",\n+                              lhs, rhs), \"null\", op1);\n           } else {\n             s = String.format(\"!(%2$s) ? Boolean.FALSE : %1$s\", lhs, rhs);\n           }\n@@ -410,7 +416,8 @@ public String translate(\n           String s;\n           if (rhsNullable) {\n             s = foldNullExpr(\n-                String.format(\"(%2$s != null && %2$s) ? true : %1$s\", lhs, rhs),\n+                String.format(\"(%2$s != null && %2$s) ? Boolean.TRUE : ((%1$s == null || %2$s == null) ? null : Boolean.FALSE)\",\n+                              lhs, rhs),\n                 \"null\", op1);\n           } else {\n             s = String.format(\"%2$s ? Boolean.valueOf(%2$s) : %1$s\", lhs, rhs);\n@@ -443,6 +450,21 @@ public String translate(\n         return val;\n       }\n     };\n+\n+\n+    private static final CallExprPrinter CAST_EXPR = new CallExprPrinter() {\n+      @Override\n+      public String translate(\n+              ExprCompiler compiler, RexCall call) {\n+        String val = compiler.reserveName();\n+        PrintWriter pw = compiler.pw;\n+        RexNode op = call.getOperands().get(0);\n+        String lhs = op.accept(compiler);\n+        pw.print(String.format(\"final %1$s %2$s = (%1$s) %3$s;\\n\",\n+                               compiler.javaTypeName(call), val, lhs));\n+        return val;\n+      }\n+    };\n   }\n \n   private static String foldNullExpr(String notNullExpr, String"
        },
        {
          "sha": "845bb3ab00c51828b41f05c5e6a3e4792adbb108",
          "filename": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/backends/standalone/RelNodeCompiler.java",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "changes": 6,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/backends/standalone/RelNodeCompiler.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/backends/standalone/RelNodeCompiler.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/backends/standalone/RelNodeCompiler.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -64,7 +64,11 @@ public Void visitFilter(Filter filter) throws Exception {\n     beginStage(filter);\n     ExprCompiler compiler = new ExprCompiler(pw, typeFactory);\n     String r = filter.getCondition().accept(compiler);\n-    pw.print(String.format(\"    if (%s) { ctx.emit(_data); }\\n\", r));\n+    if (filter.getCondition().getType().isNullable()) {\n+      pw.print(String.format(\"    if (%s != null && %s) { ctx.emit(_data); }\\n\", r, r));\n+    } else {\n+      pw.print(String.format(\"    if (%s) { ctx.emit(_data); }\\n\", r, r));\n+    }\n     endStage();\n     return null;\n   }"
        },
        {
          "sha": "8444e1e8ae480b007f1c0e8a6282c944da757e05",
          "filename": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/parser/StormParser.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "changes": 5,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/parser/StormParser.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/parser/StormParser.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/parser/StormParser.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -33,6 +33,11 @@ public StormParser(String s) {\n     this.impl.setQuotedCasing(Lex.ORACLE.quotedCasing);\n     this.impl.setUnquotedCasing(Lex.ORACLE.unquotedCasing);\n     this.impl.setIdentifierMaxLength(DEFAULT_IDENTIFIER_MAX_LENGTH);\n+    /*\n+     *  By default parser uses [ ] for quoting identifiers. Switching to DQID (double quoted identifiers)\n+     *  is needed for array and map access (m['x'] = 1 or arr[2] = 10 etc) to work.\n+     */\n+    this.impl.switchTo(\"DQID\");\n   }\n \n   @VisibleForTesting"
        },
        {
          "sha": "a85a90781dc1bada5d111d0b4e016938cea10825",
          "filename": "external/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java",
          "status": "modified",
          "additions": 57,
          "deletions": 7,
          "changes": 64,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -17,11 +17,7 @@\n  */\n package org.apache.storm.sql;\n \n-import org.apache.storm.Config;\n-import org.apache.storm.ILocalCluster;\n-import org.apache.storm.StormSubmitter;\n-import org.apache.storm.generated.SubmitOptions;\n-import org.apache.storm.generated.TopologyInitialStatus;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.storm.tuple.Values;\n import org.apache.storm.sql.runtime.*;\n import org.junit.AfterClass;\n@@ -31,9 +27,9 @@\n \n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n \n public class TestStormSql {\n   private static class MockDataSourceProvider implements DataSourcesProvider {\n@@ -56,14 +52,37 @@ public ISqlTridentDataSource constructTrident(URI uri, String inputFormatClass,\n     }\n   }\n \n+  private static class MockNestedDataSourceProvider implements DataSourcesProvider {\n+    @Override\n+    public String scheme() {\n+      return \"mocknested\";\n+    }\n+\n+    @Override\n+    public DataSource construct(\n+            URI uri, String inputFormatClass, String outputFormatClass,\n+            List<FieldInfo> fields) {\n+      return new TestUtils.MockNestedDataSource();\n+    }\n+\n+    @Override\n+    public ISqlTridentDataSource constructTrident(URI uri, String inputFormatClass, String outputFormatClass,\n+                                                  String properties, List<FieldInfo> fields) {\n+      throw new UnsupportedOperationException(\"Not supported\");\n+    }\n+  }\n+\n+\n   @BeforeClass\n   public static void setUp() {\n     DataSourcesRegistry.providerMap().put(\"mock\", new MockDataSourceProvider());\n+    DataSourcesRegistry.providerMap().put(\"mocknested\", new MockNestedDataSourceProvider());\n   }\n \n   @AfterClass\n   public static void tearDown() {\n     DataSourcesRegistry.providerMap().remove(\"mock\");\n+    DataSourcesRegistry.providerMap().remove(\"mocknested\");\n   }\n \n   @Test\n@@ -79,4 +98,35 @@ public void testExternalDataSource() throws Exception {\n     Assert.assertEquals(4, values.get(0).get(0));\n     Assert.assertEquals(5, values.get(1).get(0));\n   }\n+\n+  @Test\n+  public void testExternalDataSourceNested() throws Exception {\n+    List<String> stmt = new ArrayList<>();\n+    stmt.add(\"CREATE EXTERNAL TABLE FOO (ID INT, MAPFIELD ANY, NESTEDMAPFIELD ANY, ARRAYFIELD ANY) LOCATION 'mocknested:///foo'\");\n+    stmt.add(\"SELECT STREAM ID, MAPFIELD, NESTEDMAPFIELD, ARRAYFIELD \" +\n+                     \"FROM FOO \" +\n+                     \"WHERE NESTEDMAPFIELD['a']['b'] = 2 AND ARRAYFIELD[1] = 200\");\n+    StormSql sql = StormSql.construct();\n+    List<Values> values = new ArrayList<>();\n+    ChannelHandler h = new TestUtils.CollectDataChannelHandler(values);\n+    sql.execute(stmt, h);\n+    System.out.println(values);\n+    Map<String, Integer> map = ImmutableMap.of(\"b\", 2, \"c\", 4);\n+    Map<String, Map<String, Integer>> nestedMap = ImmutableMap.of(\"a\", map);\n+    Assert.assertEquals(new Values(2, map, nestedMap, Arrays.asList(100, 200, 300)), values.get(0));\n+  }\n+\n+  @Test\n+  public void testExternalNestedInvalidAccess() throws Exception {\n+    List<String> stmt = new ArrayList<>();\n+    stmt.add(\"CREATE EXTERNAL TABLE FOO (ID INT, MAPFIELD ANY, NESTEDMAPFIELD ANY, ARRAYFIELD ANY) LOCATION 'mocknested:///foo'\");\n+    stmt.add(\"SELECT STREAM ID, MAPFIELD, NESTEDMAPFIELD, ARRAYFIELD \" +\n+                     \"FROM FOO \" +\n+                     \"WHERE NESTEDMAPFIELD['a']['b'] = 2 AND ARRAYFIELD['a'] = 200\");\n+    StormSql sql = StormSql.construct();\n+    List<Values> values = new ArrayList<>();\n+    ChannelHandler h = new TestUtils.CollectDataChannelHandler(values);\n+    sql.execute(stmt, h);\n+    Assert.assertEquals(0, values.size());\n+  }\n }"
        },
        {
          "sha": "43b54f72e7e6b92827f24587de70c5e97e7439db",
          "filename": "external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestCompilerUtils.java",
          "status": "modified",
          "additions": 55,
          "deletions": 7,
          "changes": 62,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestCompilerUtils.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestCompilerUtils.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestCompilerUtils.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -17,31 +17,74 @@\n  */\n package org.apache.storm.sql.compiler;\n \n+import com.google.common.collect.ImmutableList;\n import org.apache.calcite.adapter.java.JavaTypeFactory;\n+import org.apache.calcite.jdbc.CalciteSchema;\n import org.apache.calcite.jdbc.JavaTypeFactoryImpl;\n+import org.apache.calcite.prepare.CalciteCatalogReader;\n import org.apache.calcite.rel.RelNode;\n import org.apache.calcite.rel.type.RelDataTypeSystem;\n import org.apache.calcite.schema.SchemaPlus;\n import org.apache.calcite.schema.StreamableTable;\n import org.apache.calcite.schema.Table;\n+import org.apache.calcite.schema.impl.ScalarFunctionImpl;\n import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.SqlOperatorTable;\n+import org.apache.calcite.sql.fun.SqlStdOperatorTable;\n import org.apache.calcite.sql.parser.SqlParseException;\n import org.apache.calcite.sql.type.SqlTypeName;\n-import org.apache.calcite.tools.*;\n+import org.apache.calcite.sql.util.ChainedSqlOperatorTable;\n+import org.apache.calcite.tools.FrameworkConfig;\n+import org.apache.calcite.tools.Frameworks;\n+import org.apache.calcite.tools.Planner;\n+import org.apache.calcite.tools.RelConversionException;\n+import org.apache.calcite.tools.ValidationException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n public class TestCompilerUtils {\n+\n     public static CalciteState sqlOverDummyTable(String sql)\n-        throws RelConversionException, ValidationException, SqlParseException {\n+            throws RelConversionException, ValidationException, SqlParseException {\n+        SchemaPlus schema = Frameworks.createRootSchema(true);\n+        JavaTypeFactory typeFactory = new JavaTypeFactoryImpl\n+                (RelDataTypeSystem.DEFAULT);\n+        StreamableTable streamableTable = new CompilerUtil.TableBuilderInfo(typeFactory)\n+                .field(\"ID\", SqlTypeName.INTEGER)\n+                .field(\"NAME\", typeFactory.createType(String.class))\n+                .field(\"ADDR\", typeFactory.createType(String.class))\n+                .build();\n+        Table table = streamableTable.stream();\n+        schema.add(\"FOO\", table);\n+        schema.add(\"BAR\", table);\n+        FrameworkConfig config = Frameworks.newConfigBuilder().defaultSchema(\n+                schema).build();\n+        Planner planner = Frameworks.getPlanner(config);\n+        SqlNode parse = planner.parse(sql);\n+        SqlNode validate = planner.validate(parse);\n+        RelNode tree = planner.convert(validate);\n+        return new CalciteState(schema, tree);\n+    }\n+\n+    public static CalciteState sqlOverNestedTable(String sql)\n+            throws RelConversionException, ValidationException, SqlParseException {\n         SchemaPlus schema = Frameworks.createRootSchema(true);\n         JavaTypeFactory typeFactory = new JavaTypeFactoryImpl\n-            (RelDataTypeSystem.DEFAULT);\n+                (RelDataTypeSystem.DEFAULT);\n+\n         StreamableTable streamableTable = new CompilerUtil.TableBuilderInfo(typeFactory)\n-            .field(\"ID\", SqlTypeName.INTEGER).build();\n+                .field(\"ID\", SqlTypeName.INTEGER)\n+                .field(\"MAPFIELD\", SqlTypeName.ANY)\n+                .field(\"NESTEDMAPFIELD\", SqlTypeName.ANY)\n+                .field(\"ARRAYFIELD\", SqlTypeName.ANY)\n+                .build();\n         Table table = streamableTable.stream();\n         schema.add(\"FOO\", table);\n         schema.add(\"BAR\", table);\n         FrameworkConfig config = Frameworks.newConfigBuilder().defaultSchema(\n-            schema).build();\n+                schema).build();\n         Planner planner = Frameworks.getPlanner(config);\n         SqlNode parse = planner.parse(sql);\n         SqlNode validate = planner.validate(parse);\n@@ -58,7 +101,12 @@ private CalciteState(SchemaPlus schema, RelNode tree) {\n             this.tree = tree;\n         }\n \n-        public SchemaPlus schema() { return schema; }\n-        public RelNode tree() { return tree; }\n+        public SchemaPlus schema() {\n+            return schema;\n+        }\n+\n+        public RelNode tree() {\n+            return tree;\n+        }\n     }\n }"
        },
        {
          "sha": "f2ac0814966ba55a9045401518502d58a84238c4",
          "filename": "external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestExprSemantic.java",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "changes": 18,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestExprSemantic.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestExprSemantic.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/TestExprSemantic.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -90,6 +90,24 @@ public void testAndWithNull() throws Exception {\n   }\n \n   @Test\n+  public void testAndWithNullable() throws Exception {\n+    Values v = testExpr(\n+            Lists.newArrayList(\n+                    \"ADDR = 'a' AND NAME = 'a'\", \"NAME = 'a' AND ADDR = 'a'\", \"NAME = 'x' AND ADDR = 'a'\", \"ADDR = 'a' AND NAME = 'x'\"\n+            ));\n+    assertEquals(new Values(false, false, null, null), v);\n+  }\n+\n+  @Test\n+  public void testOrWithNullable() throws Exception {\n+    Values v = testExpr(\n+            Lists.newArrayList(\n+                    \"ADDR = 'a'  OR NAME = 'a'\", \"NAME = 'a' OR ADDR = 'a' \", \"NAME = 'x' OR ADDR = 'a' \", \"ADDR = 'a'  OR NAME = 'x'\"\n+            ));\n+    assertEquals(new Values(null, null, true, true), v);\n+  }\n+\n+  @Test\n   public void testOrWithNull() throws Exception {\n     Values v = testExpr(\n         Lists.newArrayList("
        },
        {
          "sha": "414aeee623412ccfd7f7d036abae421b4537f824",
          "filename": "external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/standalone/TestPlanCompiler.java",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "changes": 20,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/standalone/TestPlanCompiler.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/standalone/TestPlanCompiler.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/standalone/TestPlanCompiler.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -17,6 +17,7 @@\n  */\n package org.apache.storm.sql.compiler.backends.standalone;\n \n+import com.google.common.collect.ImmutableMap;\n import org.apache.storm.tuple.Values;\n import org.apache.calcite.adapter.java.JavaTypeFactory;\n import org.apache.calcite.jdbc.JavaTypeFactoryImpl;\n@@ -30,6 +31,7 @@\n import org.junit.Test;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -66,4 +68,22 @@ public void testLogicalExpr() throws Exception {\n     proc.initialize(data, h);\n     Assert.assertEquals(new Values(true, false, true), values.get(0));\n   }\n+\n+  @Test\n+  public void testNested() throws Exception {\n+    String sql = \"SELECT ID, MAPFIELD, NESTEDMAPFIELD, ARRAYFIELD \" +\n+            \"FROM FOO \" +\n+            \"WHERE NESTEDMAPFIELD['a']['b'] = 2 AND ARRAYFIELD[1] = 200\";\n+    TestCompilerUtils.CalciteState state = TestCompilerUtils.sqlOverNestedTable(sql);\n+    PlanCompiler compiler = new PlanCompiler(typeFactory);\n+    AbstractValuesProcessor proc = compiler.compile(state.tree());\n+    Map<String, DataSource> data = new HashMap<>();\n+    data.put(\"FOO\", new TestUtils.MockNestedDataSource());\n+    List<Values> values = new ArrayList<>();\n+    ChannelHandler h = new TestUtils.CollectDataChannelHandler(values);\n+    proc.initialize(data, h);\n+    Map<String, Integer> map = ImmutableMap.of(\"b\", 2, \"c\", 4);\n+    Map<String, Map<String, Integer>> nestedMap = ImmutableMap.of(\"a\", map);\n+    Assert.assertEquals(new Values(2, map, nestedMap, Arrays.asList(100, 200, 300)), values.get(0));\n+  }\n }"
        },
        {
          "sha": "0f8daa92ab229318648ff41e318f6b5662db35e1",
          "filename": "external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/trident/TestPlanCompiler.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/trident/TestPlanCompiler.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/trident/TestPlanCompiler.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/trident/TestPlanCompiler.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -73,7 +73,7 @@ public void testCompile() throws Exception {\n   @Test\n   public void testInsert() throws Exception {\n     final int EXPECTED_VALUE_SIZE = 1;\n-    String sql = \"INSERT INTO BAR SELECT ID FROM FOO WHERE ID > 3\";\n+    String sql = \"INSERT INTO BAR SELECT ID, NAME, ADDR FROM FOO WHERE ID > 3\";\n     TestCompilerUtils.CalciteState state = TestCompilerUtils.sqlOverDummyTable(sql);\n     PlanCompiler compiler = new PlanCompiler(typeFactory);\n     final AbstractTridentProcessor proc = compiler.compile(state.tree());\n@@ -82,7 +82,7 @@ public void testInsert() throws Exception {\n     data.put(\"BAR\", new TestUtils.MockSqlTridentDataSource());\n     final TridentTopology topo = proc.build(data);\n     runTridentTopology(EXPECTED_VALUE_SIZE, proc, topo);\n-    Assert.assertArrayEquals(new Values[] { new Values(4)}, getCollectedValues().toArray());\n+    Assert.assertArrayEquals(new Values[] { new Values(4, \"x\", \"y\")}, getCollectedValues().toArray());\n   }\n \n   private void runTridentTopology(final int expectedValueSize, AbstractTridentProcessor proc,"
        },
        {
          "sha": "da763a7934e49439f5079bef3a3c79b2486a0dfe",
          "filename": "external/sql/storm-sql-runtime/src/test/org/apache/storm/sql/TestUtils.java",
          "status": "modified",
          "additions": 29,
          "deletions": 3,
          "changes": 32,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-runtime/src/test/org/apache/storm/sql/TestUtils.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/external/sql/storm-sql-runtime/src/test/org/apache/storm/sql/TestUtils.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/external/sql/storm-sql-runtime/src/test/org/apache/storm/sql/TestUtils.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -35,6 +35,8 @@\n import org.apache.storm.trident.tuple.TridentTuple;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -44,7 +46,31 @@\n \n     public MockDataSource() {\n       for (int i = 0; i < 5; ++i) {\n-        RECORDS.add(new Values(i));\n+        RECORDS.add(new Values(i, \"x\", null));\n+      }\n+    }\n+\n+    @Override\n+    public void open(ChannelContext ctx) {\n+      for (Values v : RECORDS) {\n+        ctx.emit(v);\n+      }\n+      ctx.fireChannelInactive();\n+    }\n+  }\n+\n+  public static class MockNestedDataSource implements DataSource {\n+    private final ArrayList<Values> RECORDS = new ArrayList<>();\n+\n+    public MockNestedDataSource() {\n+      List<Integer> ints = Arrays.asList(100, 200, 300);\n+      for (int i = 0; i < 5; ++i) {\n+        Map<String, Integer> map = new HashMap<>();\n+        map.put(\"b\", i);\n+        map.put(\"c\", i*i);\n+        Map<String, Map<String, Integer>> mm = new HashMap<>();\n+        mm.put(\"a\", map);\n+        RECORDS.add(new Values(i, map, mm, ints));\n       }\n     }\n \n@@ -85,11 +111,11 @@ public void execute(TridentTuple tuple, TridentCollector collector) {\n \n     private static class MockSpout implements IBatchSpout {\n       private final ArrayList<Values> RECORDS = new ArrayList<>();\n-      private final Fields OUTPUT_FIELDS = new Fields(\"ID\");\n+      private final Fields OUTPUT_FIELDS = new Fields(\"ID\", \"NAME\", \"ADDR\");\n \n       public MockSpout() {\n         for (int i = 0; i < 5; ++i) {\n-          RECORDS.add(new Values(i));\n+          RECORDS.add(new Values(i, \"x\", \"y\"));\n         }\n       }\n "
        },
        {
          "sha": "bdcc7966f8546138fcb53371b5468bb026daa663",
          "filename": "pom.xml",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "changes": 23,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/pom.xml",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/pom.xml",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/pom.xml?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -322,6 +322,8 @@\n                                 <exclude>**/metastore_db/**</exclude>\n                                 <!-- anything written into build should be ignored -->\n                                 <exclude>**/build/**</exclude>\n+                                <!-- logs generated during test -->\n+                                <exclude>**/logs/**</exclude>\n \n                                 <!-- exclude CHANGELOG, VERSION, AND TODO files -->\n                                 <exclude>**/CHANGELOG.md</exclude>\n@@ -913,6 +915,27 @@\n                     </executions>\n                 </plugin>\n                 <plugin>\n+                    <artifactId>maven-clean-plugin</artifactId>\n+                    <version>2.5</version>\n+                    <executions>\n+                        <execution>\n+                            <id>cleanup</id>\n+                            <phase>clean</phase>\n+                            <goals>\n+                                <goal>clean</goal>\n+                            </goals>\n+                            <configuration>\n+                                <excludeDefaultDirectories>true</excludeDefaultDirectories>\n+                                <filesets>\n+                                    <fileset>\n+                                        <directory>./logs/</directory>\n+                                    </fileset>\n+                                </filesets>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-assembly-plugin</artifactId>\n                     <version>2.2.2</version>"
        },
        {
          "sha": "f63bde4ce623931114bfc0ff5e3dd1994ed3fccb",
          "filename": "storm-core/src/clj/org/apache/storm/command/upload_credentials.clj",
          "status": "removed",
          "additions": 0,
          "deletions": 35,
          "changes": 35,
          "blob_url": "https://github.com/apache/storm/blob/69f2906c0748826101511b1dd6005f910ebfd5fc/storm-core/src/clj/org/apache/storm/command/upload_credentials.clj",
          "raw_url": "https://github.com/apache/storm/raw/69f2906c0748826101511b1dd6005f910ebfd5fc/storm-core/src/clj/org/apache/storm/command/upload_credentials.clj",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/clj/org/apache/storm/command/upload_credentials.clj?ref=69f2906c0748826101511b1dd6005f910ebfd5fc",
          "patch": "@@ -1,35 +0,0 @@\n-;; Licensed to the Apache Software Foundation (ASF) under one\n-;; or more contributor license agreements.  See the NOTICE file\n-;; distributed with this work for additional information\n-;; regarding copyright ownership.  The ASF licenses this file\n-;; to you under the Apache License, Version 2.0 (the\n-;; \"License\"); you may not use this file except in compliance\n-;; with the License.  You may obtain a copy of the License at\n-;;\n-;; http://www.apache.org/licenses/LICENSE-2.0\n-;;\n-;; Unless required by applicable law or agreed to in writing, software\n-;; distributed under the License is distributed on an \"AS IS\" BASIS,\n-;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-;; See the License for the specific language governing permissions and\n-;; limitations under the License.\n-(ns org.apache.storm.command.upload-credentials\n-  (:use [clojure.tools.cli :only [cli]])\n-  (:use [org.apache.storm log util])\n-  (:import [org.apache.storm StormSubmitter])\n-  (:import [java.util Properties])\n-  (:import [java.io FileReader])\n-  (:gen-class))\n-\n-(defn read-map [file-name]\n-  (let [props (Properties. )\n-        _ (.load props (FileReader. file-name))]\n-    (clojurify-structure props)))\n-\n-(defn -main [& args]\n-  (let [[{cred-file :file} [name & rawCreds]] (cli args [\"-f\" \"--file\" :default nil])\n-        _ (when (and rawCreds (not (even? (.size rawCreds)))) (throw (RuntimeException.  \"Need an even number of arguments to make a map\")))\n-        mapping (if rawCreds (apply assoc {} rawCreds) {})\n-        file-mapping (if (nil? cred-file) {} (read-map cred-file))]\n-      (StormSubmitter/pushCredentials name {} (merge file-mapping mapping))\n-      (log-message \"Uploaded new creds to topology: \" name)))"
        },
        {
          "sha": "97d18d582ebdf957e63d3310e8f44f18014ef42b",
          "filename": "storm-core/src/jvm/org/apache/storm/command/ListTopologies.java",
          "status": "renamed",
          "additions": 5,
          "deletions": 3,
          "changes": 8,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/command/ListTopologies.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/command/ListTopologies.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/jvm/org/apache/storm/command/ListTopologies.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -24,15 +24,17 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class List {\n-    private static final Logger LOG = LoggerFactory.getLogger(List.class);\n+import java.util.List;\n+\n+public class ListTopologies {\n+    private static final Logger LOG = LoggerFactory.getLogger(ListTopologies.class);\n     private static final String MSG_FORMAT = \"%-20s %-10s %-10s %-12s %-10s\\n\";\n \n     public static void main(String [] args) throws Exception {\n         NimbusClient.withConfiguredClient(new NimbusClient.WithNimbus() {\n           @Override\n           public void run(Nimbus.Client nimbus) throws Exception {\n-              java.util.List<TopologySummary> topologies = nimbus.getClusterInfo().get_topologies();\n+              List<TopologySummary> topologies = nimbus.getClusterInfo().get_topologies();\n               if (topologies == null || topologies.isEmpty()) {\n                   System.out.println(\"No topologies running.\");\n               } else {",
          "previous_filename": "storm-core/src/jvm/org/apache/storm/command/List.java"
        },
        {
          "sha": "6023409ed27ff6b7fe7e5c2f07639c84559631bb",
          "filename": "storm-core/src/jvm/org/apache/storm/command/UploadCredentials.java",
          "status": "added",
          "additions": 61,
          "deletions": 0,
          "changes": 61,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/command/UploadCredentials.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/command/UploadCredentials.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/jvm/org/apache/storm/command/UploadCredentials.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.storm.command;\n+\n+import org.apache.storm.StormSubmitter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileReader;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class UploadCredentials {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UploadCredentials.class);\n+\n+    public static void main(String[] args) throws Exception {\n+        Map<String, Object> cl = CLI.opt(\"f\", \"file\", null)\n+            .arg(\"topologyName\", CLI.FIRST_WINS)\n+            .arg(\"rawCredentials\", CLI.INTO_LIST)\n+            .parse(args);\n+\n+        String credentialFile = (String) cl.get(\"f\");\n+        List<String> rawCredentials = (List<String>) cl.get(\"rawCredentials\");\n+        String topologyName = (String) cl.get(\"topologyName\");\n+\n+        if (null != rawCredentials && ((rawCredentials.size() % 2) != 0)) {\n+            throw new RuntimeException(\"Need an even number of arguments to make a map\");\n+        }\n+        Map credentialsMap = new HashMap<>();\n+        if (null != credentialFile) {\n+            Properties credentialProps = new Properties();\n+            credentialProps.load(new FileReader(credentialFile));\n+            credentialsMap.putAll(credentialProps);\n+        }\n+        if (null != rawCredentials) {\n+            for (int i = 0; i < rawCredentials.size(); i += 2) {\n+                credentialsMap.put(rawCredentials.get(i), rawCredentials.get(i + 1));\n+            }\n+        }\n+        StormSubmitter.pushCredentials(topologyName, new HashMap(), credentialsMap);\n+        LOG.info(\"Uploaded new creds to topology: {}\", topologyName);\n+    }\n+}"
        },
        {
          "sha": "7fd61fad342770d1c8033079479764a4cee50fac",
          "filename": "storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "changes": 8,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -66,12 +66,10 @@ public static String getLogDir() {\n             dir = System.getProperty(\"storm.log.dir\");\n         } else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) {\n             dir = String.valueOf(conf.get(\"storm.log.dir\"));\n-        } else if (System.getProperty(\"storm.local.dir\") != null) {\n-            dir = System.getProperty(\"storm.local.dir\") + FILE_SEPARATOR + \"logs\";\n-        } else if (conf.get(\"storm.local.dir\") != null) {\n-            dir = conf.get(\"storm.local.dir\") + FILE_SEPARATOR + \"logs\";\n+        } else if (System.getProperty(\"storm.home\") != null) {\n+            dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n         } else {\n-            dir = concatIfNotNull(System.getProperty(\"storm.home\")) + FILE_SEPARATOR + \"logs\";\n+            dir = \"logs\";\n         }\n         try {\n             return new File(dir).getCanonicalPath();"
        },
        {
          "sha": "e04600a1daf82dea1fbf44d37506e58618dfeb11",
          "filename": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "changes": 9,
          "blob_url": "https://github.com/apache/storm/blob/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/utils/Utils.java",
          "raw_url": "https://github.com/apache/storm/raw/b1c8188d8252ef613c04aeae9e9560a800f9ead3/storm-core/src/jvm/org/apache/storm/utils/Utils.java",
          "contents_url": "https://api.github.com/repos/apache/storm/contents/storm-core/src/jvm/org/apache/storm/utils/Utils.java?ref=b1c8188d8252ef613c04aeae9e9560a800f9ead3",
          "patch": "@@ -1742,13 +1742,8 @@ public static String uuid() {\n         return UUID.randomUUID().toString();\n     }\n \n-    public static void exitProcess (int val, Object... msg) {\n-        StringBuilder errorMessage = new StringBuilder();\n-        errorMessage.append(\"Halting process: \");\n-        for (Object oneMessage: msg) {\n-            errorMessage.append(oneMessage);\n-        }\n-        String combinedErrorMessage = errorMessage.toString();\n+    public static void exitProcess (int val, String msg) {\n+        String combinedErrorMessage = \"Halting process: \" + msg;\n         LOG.error(combinedErrorMessage, new RuntimeException(combinedErrorMessage));\n         Runtime.getRuntime().exit(val);\n     }"
        }
      ]
    }
  ],
  "build_result": "failed"
}